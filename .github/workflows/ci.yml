name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress workflows when a new one starts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22.x'

jobs:
  # 高速フィードバック用の基本チェック
  fast-checks:
    name: 🚀 高速品質チェック
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      
    - name: Node.js をセットアップ
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 依存関係をインストール
      run: npm ci
      
    - name: 環境情報を表示
      run: make env-info
      
    - name: TypeScript型チェック (厳格)
      run: |
        echo "🔍 TypeScript strict mode compilation check"
        npm run type-check
        
    - name: ESLint (厳格)
      run: |
        echo "🔍 ESLint code quality check"
        make lint

  # 包括的品質チェック
  quality-check:
    name: 📋 包括的品質チェック
    runs-on: ubuntu-latest
    needs: fast-checks
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x, 22.x, 24.x]
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      
    - name: Node.js ${{ matrix.node-version }} をセットアップ
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 依存関係をインストール
      run: npm ci
      
    - name: 統合品質チェック (厳格)
      run: |
        echo "🎯 Running comprehensive quality checks"
        make quality
        
    - name: テスト実行 (厳格)
      run: |
        echo "🧪 Running test suite"
        make test
        
    - name: ビルドテスト (厳格)
      run: |
        echo "🔨 Building application"
        make build

  # セキュリティチェック (強化版)
  security-scan:
    name: 🔒 セキュリティスキャン
    runs-on: ubuntu-latest
    needs: fast-checks
    timeout-minutes: 10
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      
    - name: Node.js をセットアップ
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 依存関係をインストール
      run: npm ci
      
    - name: 依存関係脆弱性スキャン (厳格)
      run: |
        echo "🔍 Dependency vulnerability scan"
        npm audit --audit-level=moderate
        
    - name: License compliance check
      run: |
        echo "📜 License compliance check"
        npx license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD" --summary || echo "⚠️  License check completed with warnings"
        
    - name: Secret scanning (basic)
      run: |
        echo "🔍 Basic secret scanning"
        ! grep -r -i "api.key\|password\|secret\|token" --include="*.js" --include="*.ts" --include="*.json" . || (echo "⚠️  Potential secrets detected" && exit 1)

  # マルチプラットフォームビルドテスト
  build-test:
    name: 🏗️ ビルドテスト (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [fast-checks, quality-check]
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      
    - name: Node.js をセットアップ
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 依存関係をインストール
      run: npm ci
      
    - name: TypeScript compilation
      run: |
        echo "🔧 TypeScript compilation check"
        npm run type-check
        
    - name: アプリケーションビルド
      run: |
        echo "🏗️  Building application for ${{ matrix.os }}"
        npm run build
        
    - name: ビルド成果物の検証
      run: |
        echo "✅ Verifying build artifacts"
        ls -la dist/ || echo "No dist directory found"
        
    - name: ビルド成果物をアップロード (Linux)
      if: matrix.os == 'ubuntu-latest' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: murmur-linux-build-${{ github.sha }}
        path: dist/
        retention-days: 7

  # PR品質ゲート (厳格版)
  pr-quality-gate:
    name: 🎯 PR品質ゲート
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [quality-check, security-scan, build-test]
    timeout-minutes: 5
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      
    - name: Node.js をセットアップ
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 依存関係をインストール
      run: npm ci
      
    - name: PR最終品質チェック
      run: |
        echo "🎯 Final PR quality check"
        make pr-ready
        
    - name: PR品質レポート生成
      run: |
        echo "## 🎯 PR品質チェック結果" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ 完了チェック項目" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **TypeScript型チェック**: 厳格モード通過" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **ESLint品質チェック**: 全ルール通過" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **テスト実行**: 全テスト通過" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **セキュリティスキャン**: 脆弱性なし" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **マルチプラットフォームビルド**: 全OS対応確認" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **コード品質**: Make quality 全通過" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 マージ準備状況" >> $GITHUB_STEP_SUMMARY
        echo "**このPRは全ての品質基準をクリアしており、マージ準備完了です！**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 品質統計" >> $GITHUB_STEP_SUMMARY
        echo "- **Node.js対応**: 20.x, 22.x, 24.x" >> $GITHUB_STEP_SUMMARY
        echo "- **OS対応**: Ubuntu, Windows, macOS" >> $GITHUB_STEP_SUMMARY
        echo "- **TypeScript**: Strict mode 有効" >> $GITHUB_STEP_SUMMARY

  # 成功通知 (main branch push のみ)
  deployment-ready:
    name: 🚀 デプロイ準備完了
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [quality-check, security-scan, build-test]
    timeout-minutes: 2
    
    steps:
    - name: デプロイ準備完了通知
      run: |
        echo "## 🚀 デプロイ準備完了" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**main ブランチへのプッシュが成功し、全ての品質チェックが通過しました。**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ 完了項目" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 品質チェック完了" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 セキュリティスキャン完了" >> $GITHUB_STEP_SUMMARY
        echo "- 🏗️  ビルドテスト完了" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 成果物生成完了" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**アプリケーションはデプロイ可能な状態です！**" >> $GITHUB_STEP_SUMMARY